"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceiveAccountBlockTask = void 0;
var address_1 = require("./../wallet/address");
var vitejs_utils_1 = require("./../utils");
var transaction_1 = require("./transaction");
var ReceiveAccountBlockTask = (function () {
    function ReceiveAccountBlockTask(_a) {
        var address = _a.address, provider = _a.provider, privateKey = _a.privateKey, sign = _a.sign;
        var err = vitejs_utils_1.checkParams({ address: address, provider: provider, privateKey: privateKey }, ['address', 'provider'], [{
                name: 'address',
                func: address_1.isValidAddress
            }, {
                name: 'privateKey',
                func: function (str) {
                    if (!sign && !privateKey)
                        return false;
                    if (str === undefined || str === null) {
                        return true;
                    }
                    return vitejs_utils_1.isHexString(str);
                }
            }]);
        if (err) {
            throw err;
        }
        this.address = address;
        this.provider = provider;
        this.sign = sign;
        this.privateKey = privateKey;
        this._transaction = new transaction_1.default(address);
        this._transaction.setProvider(provider);
        if (privateKey) {
            this._transaction.setPrivateKey(privateKey);
        }
        this._timer = null;
        this.successCB = null;
        this.errorCB = null;
    }
    ReceiveAccountBlockTask.prototype.start = function (_a) {
        var _this = this;
        var _b = _a === void 0 ? {
            checkTime: 3000,
            transctionNumber: 5
        } : _a, _c = _b.checkTime, checkTime = _c === void 0 ? 3000 : _c, _d = _b.transctionNumber, transctionNumber = _d === void 0 ? 5 : _d;
        this.stop();
        var toReceive = function () {
            _this._timer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.reveive(transctionNumber)];
                        case 1:
                            _a.sent();
                            if (!this._timer) {
                                return [2];
                            }
                            toReceive();
                            return [2];
                    }
                });
            }); }, checkTime);
        };
        toReceive();
    };
    ReceiveAccountBlockTask.prototype.stop = function () {
        this._timer && clearTimeout(this._timer);
        this._timer = null;
    };
    ReceiveAccountBlockTask.prototype.onError = function (errorCB) {
        this.errorCB = errorCB;
    };
    ReceiveAccountBlockTask.prototype.onSuccess = function (successCB) {
        this.successCB = successCB;
    };
    ReceiveAccountBlockTask.prototype.reveive = function (pageSize) {
        return __awaiter(this, void 0, void 0, function () {
            var unreceivedBlocks, error_1, accountBlockList, i, unreceivedBlock, previousAccountBlock, sendBlockHash, accountBlock, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        unreceivedBlocks = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, this.getUnreceivedBlocks(pageSize)];
                    case 2:
                        unreceivedBlocks = _a.sent();
                        return [3, 4];
                    case 3:
                        error_1 = _a.sent();
                        this.emitError({
                            message: 'Get unreceivedAccountBlocks error',
                            error: error_1
                        });
                        return [2];
                    case 4:
                        if (!unreceivedBlocks.length) {
                            this.emitSuccess({ message: 'Don\'t have unreceivedAccountBlocks.' });
                            return [2];
                        }
                        accountBlockList = [];
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < unreceivedBlocks.length)) return [3, 10];
                        unreceivedBlock = unreceivedBlocks[i];
                        previousAccountBlock = accountBlockList.length
                            ? accountBlockList[accountBlockList.length - 1]
                            : null;
                        sendBlockHash = unreceivedBlock.hash;
                        accountBlock = null;
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4, this.receiveAccountBlockByPrevious({
                                sendBlockHash: unreceivedBlock.hash,
                                previousAccountBlock: previousAccountBlock
                            })];
                    case 7:
                        accountBlock = _a.sent();
                        accountBlockList.push(accountBlock);
                        return [3, 9];
                    case 8:
                        error_2 = _a.sent();
                        accountBlockList.length && this.emitSuccess({
                            message: 'Receive accountBlock success',
                            accountBlockList: accountBlockList
                        });
                        this.emitError({
                            message: "Receive accountBlock " + sendBlockHash + " error",
                            unreceivedHash: sendBlockHash,
                            error: error_2
                        });
                        return [2];
                    case 9:
                        i++;
                        return [3, 5];
                    case 10:
                        this.emitSuccess({
                            message: 'Receive accountBlock success',
                            accountBlockList: accountBlockList
                        });
                        return [2];
                }
            });
        });
    };
    ReceiveAccountBlockTask.prototype.emitSuccess = function (result) {
        this.successCB && this.successCB(__assign({ status: 'ok', timestamp: new Date().getTime() }, result));
    };
    ReceiveAccountBlockTask.prototype.emitError = function (error) {
        this.errorCB && this.errorCB(__assign({ status: 'error', timestamp: new Date().getTime() }, error));
    };
    ReceiveAccountBlockTask.prototype.getUnreceivedBlocks = function (pageSize) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.provider.request('ledger_getUnreceivedBlocksByAddress', this.address, 0, pageSize)];
                    case 1:
                        data = _a.sent();
                        if (!data || !data.length) {
                            return [2, []];
                        }
                        return [2, data];
                }
            });
        });
    };
    ReceiveAccountBlockTask.prototype.receiveAccountBlockByPrevious = function (_a) {
        var sendBlockHash = _a.sendBlockHash, previousAccountBlock = _a.previousAccountBlock;
        return __awaiter(this, void 0, void 0, function () {
            var accountBlock;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        accountBlock = this._transaction.receive({ sendBlockHash: sendBlockHash });
                        if (!this.privateKey) return [3, 1];
                        if (!previousAccountBlock) {
                            return [2, accountBlock.autoSendByPoW()];
                        }
                        accountBlock.setPreviousAccountBlock(previousAccountBlock);
                        return [2, accountBlock.sendByPoW()];
                    case 1:
                        if (!previousAccountBlock) return [3, 2];
                        accountBlock.setPreviousAccountBlock(previousAccountBlock);
                        return [3, 4];
                    case 2: return [4, accountBlock.autoSetPreviousAccountBlock()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [4, accountBlock.PoW()];
                    case 5:
                        _b.sent();
                        return [4, this.sign(accountBlock)];
                    case 6:
                        _b.sent();
                        return [2, accountBlock.send()];
                }
            });
        });
    };
    return ReceiveAccountBlockTask;
}());
exports.ReceiveAccountBlockTask = ReceiveAccountBlockTask;
